#!/bin/bash

set -e

source lib/function/echoes
source lib/source
validation
if [[ -f "board.txt" ]] && [[ -f "override.txt" ]]; then . override.txt; override_board; fi
if [[ -f "board.txt" ]]; then . board.txt; else noboard; fi
source userdata.txt
source lib/function/rootfs
if [[ -f "custom.txt" ]]; then
	. custom.txt
else
	echo "Missing custom.txt file."
	exit 1
fi

# clean
if [[ -d "sysroot" ]] || [[ -d "p1" ]] || [[ -d "BOOT" ]]; then make cleanup; clear -x; fi

# verbosity
if [ $VERBOSE -eq 1 ]; then
	set -eux -o pipefail
else
	set -eu -o pipefail
fi

if [[ -z "$DISTRO" ]]; then
	echo "E: Variable DISTRO not defined."
	exit 1
fi

# restrictions
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$DISTRO" == "raspbian" ]]; then
	echo -e "Aarch64 is currently not supported."
	echo -e "To build an Raspbian IMG you need to use x86_64."
	echo -e ""
	read -p "Press enter to continue."
	exit 1
fi
if [[ "$ROOTFS_ARCH" == "rootfs-armel" ]] && [[ "$DISTRO" == "ubuntu" ]]; then
	echo -e "Ubuntu does not support ${ARCH_EXT}."
	echo -e ""
	read -p "Press enter to continue."
	exit 1
fi
if [[ "$ROOTFS_ARCH" == "rootfs-armel" || "$ROOTFS_ARCH" == "rootfs-arm64" ]] && [[ "$DISTRO" == "raspbian" ]]; then
	echo -e "Raspbian does not support ${ARCH_EXT}."
	echo -e ""
	read -p "Press enter to continue."
	exit 1
fi
# keyrings and setups
if [[ "$DISTRO" == "devuan" || "$DISTRO" == "raspbian" ]]; then
	${DISTRO}_keyring
fi
if [[ "$HOST_MACHINE" == "Ubuntu" ]]; then
	:;
else
	if [[ "$DISTRO" == "ubuntu" ]]; then
		ubuntu_setup
	fi
fi

for v in DISTRO DISTRO_VERSION ROOTFS_ARCH ROOT
do
	if [[ -z "$$v" ]]; then
		echo "E: Variable $v not defined"
		exit 1
	fi
done
ROOT="sysroot"
RELEASE_TARBALL=${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz
if [[ -f "$RELEASE_TARBALL" ]]; then ls -ls $RELEASE_TARBALL; exit 0; fi
echo ""
echo -e "${WHT}Starting debootstrap${FIN} ..."
# start debootstrap
if [ $DEVROOTFS -eq 1 ]; then
	source lib/function/release
	RAM=0
	ROOTFS_FOLDER="img/"
	RELEASE_NAME=${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}
	if [ $RAM -ne 0 ]; then IMAGE_FOLDER="ram/"; fi
	mkdir -p "$ROOTFS_FOLDER"
	if [ $RAM -ne 0 ]; then mount -t tmpfs -o size=4G tmpfs $ROOTFS_FOLDER; fi
	if [ $VERBOSE -eq 1 ]; then
		sysroot_partition
	else
		sysroot_partition > /dev/null 2>&1
	fi
fi
mkdir -p ${ROOT}/usr/bin
cp $(command -v "${STATIC}") ${ROOT}/usr/bin
run_debootstrap

# creating developer tarball
if [ $DEVROOTFS -eq 1 ]; then
	sysroot_setup
	mount -o bind /dev ${ROOT}/dev
	mount -o bind /dev/pts ${ROOT}/dev/pts
	cp -f lib/source ${ROOT}/root/source.txt
	cp -f {scripts/rootfs-extra,userdata.txt,board.txt} ${ROOT}/root/
	chroot ${ROOT} /root/rootfs-extra
	umount ${ROOT}/dev/pts
	umount ${ROOT}/dev
	rm -fr ${ROOT}/root/{rootfs-extra,*.txt}
	rm -f ${ROOT}/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io
	rm -f ${ROOT}/etc/apt/sources.list
fi
# clean up
if [[ -f "${ROOT}/usr/bin/qemu-aarch64-static" ]]; then
	rm -f ${ROOT}/usr/bin/qemu-aarch64-static
fi
if [[ -f "${ROOT}/usr/bin/qemu-arm-static" ]]; then
	rm -f ${ROOT}/usr/bin/qemu-arm-static
fi
rm -fdr ${ROOT}/var/cache/debconf/*

# finish
echo
echo -e "== Archiving: ${RELEASE_TARBALL}"
cd ${ROOT}
XZ_DEFAULTS="--threads=${CORES}"; export XZ_DEFAULTS;tar cfJ - * | (pv -terb > ../$RELEASE_TARBALL)
cd ..

if [ $DEVROOTFS -eq 1 ]; then
	losetup -d "${IMAGE_LOOP_DEV}"
	rm -f "${ROOTFS_FOLDER}${RELEASE_NAME}"
	if [ $RAM -ne 0 ]; then umount "${ROOTFS_FOLDER}"; fi
	rmdir "${ROOTFS_FOLDER}"
fi

if [[ -d "${ROOT}" ]]; then umount ${ROOT}; sleep .50; rm -fdr ${ROOT}; fi

if [[ "$HOST_MACHINE" == "Debian" || "$HOST_MACHINE" == "Ubuntu" ]]; then
	# devuan release
	rm -f /usr/share/debootstrap/scripts/chimaera
	rm -f /usr/share/debootstrap/scripts/daedalus
	rm -f /usr/share/debootstrap/scripts/excalibur
fi

exit 0
