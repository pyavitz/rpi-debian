#!/bin/bash
source lib/function/echoes
source lib/source
validation
if [[ -f "board.txt" ]]; then . board.txt; else noboard; fi
sleep 1
source userdata.txt
source lib/function/rootfs
source lib/function/release
source custom.txt
# clean
if [[ -d "sysroot" ]] || [[ -d "p1" ]] || [[ -d "BOOT" ]] || [[ -f "shrink.img" ]]; then make clean; clear -x; fi
# verbosity
if [ $VERBOSE -eq 1 ]; then set -eux -o pipefail; else set -eu -o pipefail; fi
mirrors
# restrictions
if [[ "$HOST_ARCH" == "aarch64" ]] && [[ "$DISTRO" == "raspbian" ]]; then
	echo -e "Aarch64 is currently not supported."
	echo -e "To build an Raspbian IMG you need to use x86_64."
	echo -e ""
	read -p "Press enter to continue."
	exit 0
fi
if [[ "$ROOTFS_ARCH" == "rootfs-armel" ]] && [[ "$DISTRO" == "ubuntu" ]]; then
	echo -e "Ubuntu does not support ${ARCH_EXT}."
	echo -e ""
	read -p "Press enter to continue."
	exit 0
fi
if [[ "$ROOTFS_ARCH" == "rootfs-armel" || "$ROOTFS_ARCH" == "rootfs-arm64" ]] && [[ "$DISTRO" == "raspbian" ]]; then
	echo -e "Raspbian does not support ${ARCH_EXT}."
	echo -e ""
	read -p "Press enter to continue."
	exit 0
fi
# keyrings and setups
if [[ "$DISTRO" =~ ^(devuan||kali|raspbian)$ ]]; then ${DISTRO}_keyring; fi
if [[ "$HOST_MACHINE" == "Ubuntu" ]]; then :; else if [[ "$DISTRO" == "ubuntu" ]]; then ${DISTRO}_keyring; fi; fi
# check for qemu
if [[ `command -v ${STATIC}` ]]; then
	:;
else
	echo -e "Missing depends: ${STATIC}"
	echo -e "Run ./install.sh"
	exit 1
fi
if [[ `command -v mmdebstrap` ]]; then
	:;
else
	echo -e "Missing depends: mmdebstrap"
	apt install -y mmdebstrap
fi

P_VALUE="sysroot"
${DISTRO}_sources_list
RELEASE_TARBALL=${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz
if [[ -f "$RELEASE_TARBALL" ]]; then ls -ls $RELEASE_TARBALL; exit 0; fi
CAP_DISTRO=`echo "${DISTRO}" | sed -e "s/\b\(.\)/\u\1/g"`
CAP_RELEASE=`echo "${DISTRO_VERSION}" | sed -e "s/\b\(.\)/\u\1/g"`
echo -e ""
echo -e "${WHT}Distribution${FIN} ${PNK}[${FIN}${GRN}${CAP_DISTRO} ${CAP_RELEASE}${FIN}${PNK}]${FIN}"
echo -e ""
echo -e "${WHT}Running bootstrap${FIN} ..."
# start bootstrap
if [ $DEVROOTFS -eq 1 ]; then
	RAM=0
	ROOTFS_FOLDER="img/"
	RELEASE_NAME=${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}
	if [ $RAM -ne 0 ]; then IMAGE_FOLDER="ram/"; fi
	mkdir -p "$ROOTFS_FOLDER"
	if [ $RAM -ne 0 ]; then mount -t tmpfs -o size=4G tmpfs $ROOTFS_FOLDER; fi
	if [ $VERBOSE -eq 1 ]; then sysroot_partition; else sysroot_partition > /dev/null 2>&1; fi
fi
mkdir -p ${P_VALUE}/usr/bin
cp $(command -v "${STATIC}") ${P_VALUE}/usr/bin
run_debootstrap

# creating developer tarball
if [ $DEVROOTFS -eq 1 ]; then
	sysroot_setup
	mount -o bind /dev ${P_VALUE}/dev
	mount -o bind /dev/pts ${P_VALUE}/dev/pts
	cp -f lib/source ${P_VALUE}/root/source.txt
	cp -f {scripts/rootfs-extra,userdata.txt,board.txt} ${P_VALUE}/root/
	chroot ${P_VALUE} /root/rootfs-extra
	umount ${P_VALUE}/dev/pts
	umount ${P_VALUE}/dev
	rm -fr ${P_VALUE}/root/{rootfs-extra,*.txt}
	rm -f ${P_VALUE}/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io
	rm -f ${P_VALUE}/etc/apt/sources.list
	rm -f ${SOURCES_LIST}
fi

# clean up
rm -f ${P_VALUE}/usr/bin/${STATIC}
rm -fdr ${P_VALUE}/lost+found
rm -fdr ${P_VALUE}/var/cache/debconf/*
rm -fdr ${P_VALUE}/*usr-is-merged*

# finish
echo ""
echo -e "── Archiving ${PNK}[${FIN}${WHT}${RELEASE_TARBALL}${FIN}${PNK}]${FIN}"
cd ${P_VALUE}
XZ_DEFAULTS="--threads=${CORES}"; export XZ_DEFAULTS;tar cfJ - * | (pv -terb > ../$RELEASE_TARBALL)
cd ..
if [ $DEVROOTFS -eq 1 ]; then
	losetup -d "${IMAGE_LOOP_DEV}"
	rm -f "${ROOTFS_FOLDER}${RELEASE_NAME}"
	if [ $RAM -ne 0 ]; then umount "${ROOTFS_FOLDER}"; fi
	rmdir "${ROOTFS_FOLDER}"
fi

if [[ -d "${P_VALUE}" ]]; then umount ${P_VALUE}; sleep .50; rm -fdr ${P_VALUE}; fi
if [[ -v "SPOOF_SCRIPT" ]] && [[ "$SPOOF_SCRIPT" == "true" ]]; then rm -f ${DEBOOTSTRAP_DIR}/${DISTRO_VERSION}; fi

exit 0
